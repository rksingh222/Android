Back up on 5 feb 2025
Android(Denis Panjuta – kotlin)
Small Kotlin No Activity App: Android(Denis Panjuta – kotlin)
Android Studio — File — New Project — No Activity — Next — RockScissorPaper — Once project opens — In Kotlin + Java — New Kotlin file —(main/…/app/src/main/java) — select that — inside com.example.rockpaperscissors

package com.example.rockpaperscissors

fun main(){
    var computerChoice = ""
    var playerChoice = ""
    println("Rock, Paper or Scissors ? Enter your choice")
    playerChoice = readln()
[write (1..3) it will show <_]
    val randomNumber = (1..3).random()

    if(randomNumber == 1){
        computerChoice = "Rock"
    }else if(randomNumber == 2){
        computerChoice = "Paper"
    }else if(randomNumber == 3){
        computerChoice = "Scissors"
    }
    println(computerChoice)
}

Run It and go in terminal 
Rock, Paper or Scissors ? Enter your choice
1
Rock

Process finished with exit code 0

place your cursor just near the if and you will be able to see the bulb and then just click the bulb and replace if with when and you will see this code
when (randomNumber) {
        1 -> {
            computerChoice = "Rock"
        }
        2 -> {
            computerChoice = "Paper"
        }
        3 -> {
            computerChoice = "Scissors"
        }
    }

 to assign winner with value tie we do like this
val winner = when {
     "comparision =="
      playerChoice == computerChoice  -> "Tie"
    //In all three player wins
      playerChoice == "Rock" && computerChoice == "Scissors" -> "Player"
     playerChoice == "Paper" && computerChoice == "Rock." -> "Player"
     playerChoice == "Scissors" && computerChoice == "Paper" -> "Player"
     else -> "Computer"
}

if (winner == "Tie"){
        println("It's a tie")
    }else if(winner == "Player") {
        println("player won")
    }else {
        println("Computer won!")
    }

To display variable in println we use
Println("$winner won")

how to call from main function makeCoffee(): Android(Denis Panjuta – kotlin)
fun main(){. makeCoffee() }

fun makeCoffee() { }

How to call function with parameter: Android(Denis Panjuta – kotlin)
makeCoffee(sugarCount : 1) —- fun makeCoffee(sugarCount : Int)—-println(“$sugarCount”);

How to Return in Function: Android(Denis Panjuta – kotlin)
fun add(num1: Int, num2: Int) : Int{}

Converting in toDouble(): Android(Denis Panjuta – kotlin)
num.toDouble()

Creating Classes: Android(Denis Panjuta – kotlin)
Class dog { init() { bark() } fun bark() { println(“woof woof”); } }

fun main() { var daisy = Dog() } output : woof woof

Understanding default constructor and default values: Android(Denis Panjuta – kotlin)
when we mention val it becomes a property

Class dog(val name:String, val breed:String, var age:Int = 0){

init() { bark(name); } fun bark(name: String){ println(“$name says woof woof”) }

fun main() { var daisy = Dog(name : “Daisy”, breed: “Dwarf Poodle” , age: 1 ) println(“{${daisy.name} is a ${daisy.breed} and is ${daisy.age} years old “)

val and var — accessing the property: Android(Denis Panjuta – kotlin)
daisy.age =2 // this will change the value of the property

but we cannot change a val because

daisy.name= “Tommy” —- will give error

Data Classes: Android(Denis Panjuta – kotlin)
Data classes in Kotlin is classes whose main purpose is to hold data

data class coffeedetails {

val sugarCount : Int,

val name : String,

val size : String,

val creamAmount : Int

}

fun main() {

val cofeeforDenis = coffeeDetails( sugarCount : 0, name : “Jake” , size : “test”, creamAmount : 10);

makeCoffee(coffeeforDenis);

}

fun makeCoffee (coffeedetails : coffeeDetails){

if (coffedetails.sugarCount == 1){

println(“${coffedetails.count}”)

}

listOf and mutableListOf: Android(Denis Panjuta – kotlin)
val shoppingList = listOf(“RAM”, “ROM”, “Processor”);

its immutable list we can not add items in this list

val shoppingList = mutableListOf(“Processor”, “RAM”, “Graphics”);

shoppingList.add(“Cooling System”);

shoppingList.remove(“RAM”); // it should be same as its mentioned before

its mutable and

shoppingList.removeAt(index: 1);

shoppingList.add(index: 2, element: “RAM”);

to access elements in list

shoppingList[2] // will see the item in the list

shoppingList[3] = “Graphics Card RX 7800XT”

shoppingList.set(1, “Water Cooling”);

how to traverse the list: Android(Denis Panjuta – kotlin)
val shoppingList = listOf(“RAM”, “ROM”, “Processor”);

for (item in shoppingList){

println(item)

if(item == “RAM”){

shoppingList.removeLast()

break;

}

}

BankAccount App: Android(Denis Panjuta – kotlin)
Inside the kotlin file

fun main(){
    val denisesBankAccount = BankAccount("Dennis Panjuta",1338.20)

    println(denisesBankAccount.accountHolder)
   denisesBankAccount.deposit(amount: 200.0);
   denisesBankAccount.withdrew(amount: 200.0);
   denisesBankAccount.deposit(amount: 200.0);
}

Inside the Class

package com.example.bankaccountapp

class BankAccount(var accountHolder : String, var balance : Double) {
    private val transactionHistory = mutableListOf<String>()
    fun deposit(amount: Double){
       balance += amount;
       transactionHistory.add("$accountHolder deposited $$amount");
    }
    fun withdraw(amount: Double){
       if(amount <= balance)
       {
          balance -= amount;
          transactionHistory.add("$accountHodler deposited $$amount");
    }
    fun displayTransactionHistory(){
       println("Transaction history for $accountHolder");
       for( transaction in transactionHistory)
       {
         println(transaction);
       }
    }
}
First Kotlin Project: Android(Denis Panjuta – kotlin)
create the project with name UnitConverterApp and then add with a diagram of empty window
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            UnitConverterAppTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
                    Greeting(
                        name = "Android",
                        modifier = Modifier.padding(innerPadding)
                    )
                }
            }
        }
    }
}

In this UnitConverterAppTheme is a composable and to get that press command window and click on it and it will appear.
My executables were not running
so I had to change my gradle file I went to 
build.gradle.kts
In that I changed compileSdk and targetSdk to 35 instead of 34 and sync it which is above the code 
Once sync run the main file and it ran for me
Unit Converter with Column and Row Composable: Android(Denis Panjuta – kotlin)
 setContent {
            UnitConverterAppTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
                   UnitConverter()
                }
            }
        }

@Composable
fun UnitConverter(){
    Column {
        Row {
            Greeting(name = "Android")
            Greeting(name = "Bluetooth")
        }
    }
}
Prints
Android Bluetooth
Unit Conveter with static text and Input Text(Outlined Text Field): Android(Denis Panjuta – kotlin)
Column {
        Text(text = "Unit Converter")
        OutlinedTextField(value = "", onValueChange = {
            //Here goes what should happen when the value of our outlined
            //Text field changes
        })
    }
Preview of the code: Android(Denis Panjuta – kotlin)
@Composable
fun UnitConverter(){
    Column {
        Text(text = "Unit Converter")
        OutlinedTextField(value = "", onValueChange = {
            //Here goes what should happen when the value of our outlined
            //Text field changes
        })
    }
}

this is preview
@Preview
@Composable
fun UnitConverterPreview(){
    UnitConverter()
}

then In the second window you will see a comb like figure you will click that and you will see the preview 
